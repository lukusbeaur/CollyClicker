// collyclicker/app/ctest.go

package main

import (
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"collyclicker/internal/scraper"

	"github.com/PuerkitoBio/goquery"
	"github.com/gocolly/colly/v2"
)

func main() {
	//i hate this but i need to do this for production.
	// We divide the counter by 2 because each team (Home/Away) has two datapoints (e.g., Manager and Captain) listed flatly.
	// Example: counter 0/1 -> first team, counter 2/3 -> second team, etc.
	// This keeps team data grouped correctly inside the pageData slice.
	var datapointCounter = 0
	var formationCounter = 0
	var tablesCounter = 0
	var keeperCounter = 0

	type TeamTables struct {
		Title   string
		TabName string
		Headers []string
		Rows    [][]string
	}
	type TeamData struct {
		Teamname     string
		CoachNames   []string
		CaptainNames []string
		Formation    string
		AllTables    [][]TeamTables
	}
	// Pre-allocate for two teams (Home and Away)
	var pageData = []TeamData{{}, {}}

	c := colly.NewCollector(
		colly.UserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"),
	)
	c.Limit((&colly.LimitRule{
		RandomDelay: 2 * time.Second,
		DomainGlob:  "*",
	}))

	//Specify the Selector: The element of the page you want
	//Specify the Handler: How do you want the data managed
	sh := []scraper.SelectorHandler{
		{
			//@ div.datapoint(a div with a class name datapoint) --> captain / Manager names --> add them to struct
			Selector: "div.datapoint",
			Handler: func(e *colly.HTMLElement) {
				text := strings.TrimSpace(e.Text)
				//Check to see if Selector has a prefix of Manager or captain,
				//if so --> append pageData Object slice @[handler specific counter /2] //Check logic notes above for why counter/2

				if strings.HasPrefix(text, "Manager:") {
					pageData[datapointCounter/2].CoachNames = append(pageData[datapointCounter/2].CoachNames, strings.TrimPrefix(text, "Manager:"))
				} else if strings.HasPrefix(text, "Captain:") {
					pageData[datapointCounter/2].CaptainNames = append(pageData[datapointCounter/2].CaptainNames, strings.TrimPrefix(text, "Captain:"))
				}
				datapointCounter++
			},
		},
		{
			//@ div.lineup (a div with a class name lineup) --> table header with the colspan attribute
			//--> Formation --> add them to struct.
			Selector: "div.lineup th[colspan]",
			Handler: func(e *colly.HTMLElement) {
				//Regex formation Manchester Utd (4-2-3-1) --> 4-2-3-1
				text := strings.TrimSpace(e.Text)
				re := regexp.MustCompile(`\(([^\)]+)\)`)
				//'Bench' is embedded in this Selector. != Bench assign Formation data.
				if text != "Bench" {
					match := re.FindStringSubmatch(text)
					if len(match) > 1 {
						pageData[formationCounter/2].Formation = match[1]
					}
				}
				formationCounter++
			},
		},
		{
			//@ div w/ ID all_player_stats --> select div w/ class filter & switcher --> the div with in that
			//-->table tabs --> add to TeamTables Object
			Selector: "div[id^='all_player_stats']",
			Handler: func(e *colly.HTMLElement) {
				var Tables []TeamTables
				// Save teamname into the TeamData
				title := strings.TrimSpace(e.DOM.Find("h2").Eq(1).Text())

				//@div--> Filter Class --> switcher Class -> Embedded a.sr_preset element
				//Find all tabs names.
				e.DOM.Find("div.filter.switcher a.sr_preset").Each(func(_ int, tab *goquery.Selection) {
					var Table TeamTables
					Table.Title = title

					tabName := strings.TrimSpace(strings.ToLower(tab.Text()))
					suffix := strings.ReplaceAll(tabName, " ", "_")

					//So annoying but no nice way to do this.
					//The Table ID and Table Class names are not the same, as the tab class and tab ID names
					//So in order to make sure logic below works, We must manually change them. GROSS
					if suffix == "pass_types" {
						suffix = "passing_types"
					}
					if suffix == "defensive_actions" {
						suffix = "defense"
					}
					if suffix == "miscellaneous_stats" {
						suffix = "misc"
					}

					Table.TabName = suffix
					//A floating goQuery for a matched table.
					var matchedTable *goquery.Selection

					//@table /w ID starting with '_stats'
					e.DOM.Find("table[id^='stats_']").Each(func(_ int, table *goquery.Selection) {
						id, exists := table.Attr("id")
						if !exists {
							return
						}
						//if our table attribute 'id' contains the sanatized classname 'suffix',
						//assign matchedTable Query as table(our Each(*goquery))
						if strings.Contains(id, suffix) {
							matchedTable = table
						}
					})
					if matchedTable == nil {
						fmt.Printf("No table found for tab %s\n", tabName)
						return
					}
					//@matchedTable --> Find Table head --> Table row--> get all [th] table headers
					matchedTable.Find("thead tr").Each(func(_ int, header *goquery.Selection) {
						var headers []string
						//Skip the overheaders we dont need em
						if val, _ := header.Attr("class"); val == "over_header" {
							return
						}
						//
						header.Find("th").Each(func(_ int, cell *goquery.Selection) {
							headers = append(headers, strings.TrimSpace(cell.Text()))
						})
						Table.Headers = headers
					})
					//@matchedTable find the tbody --> Embeddeded Table rows --> th, td Cell data
					matchedTable.Find("tbody tr").Each(func(_ int, row *goquery.Selection) {
						var rowA []string
						row.Find("th, td").Each(func(_ int, cell *goquery.Selection) {
							rowA = append(rowA, strings.TrimSpace(cell.Text()))
						})
						Table.Rows = append(Table.Rows, rowA)
					})
					//Tables slice will be appended with each table.
					Tables = append(Tables, Table)
				})
				//Append PageData object[counter/2]
				pageData[tablesCounter/2].AllTables = append(pageData[tablesCounter/2].AllTables, Tables)
				tablesCounter++
			},
		},
		{
			Selector: "div[id^='all_keeper_stats_']",
			Handler: func(e *colly.HTMLElement) {
				var tables TeamTables

				fullTitle := strings.TrimSpace(e.DOM.Find("h2").Text())
				tables.Title = fullTitle
				tables.TabName = "keeper_stats"

				// Extract Team Name
				teamName := extractTeamName(fullTitle)
				if pageData[keeperCounter].Teamname == "" {
					pageData[keeperCounter].Teamname = teamName
				}

				// Find table
				table := e.DOM.Find("table.stats_table")

				// Headers
				table.Find("thead tr").Each(func(_ int, tr *goquery.Selection) {
					if class, _ := tr.Attr("class"); class == "over_header" {
						return
					}
					tr.Find("th").Each(func(_ int, th *goquery.Selection) {
						tables.Headers = append(tables.Headers, strings.TrimSpace(th.Text()))
					})
				})

				// Rows
				table.Find("tbody tr").Each(func(_ int, row *goquery.Selection) {
					var rowData []string
					row.Find("th, td").Each(func(_ int, cell *goquery.Selection) {
						rowData = append(rowData, strings.TrimSpace(cell.Text()))
					})
					tables.Rows = append(tables.Rows, rowData)
				})

				// Save into a new table group
				pageData[keeperCounter].AllTables = append(pageData[keeperCounter].AllTables, []TeamTables{tables})

				keeperCounter++ // move after saving
			},
		},
	}

	// Init constructor.
	cfg := &scraper.ScraperConfig{
		Collector:     c,
		UseProxy:      false,
		LinkSelectors: sh,
		Debug:         true,
	}

	testlink := "https://fbref.com/en/matches/cc5b4244/Manchester-United-Fulham-August-16-2024-Premier-League"
	s := scraper.NewCollyScraper(cfg)

	err := s.Scrape(testlink)
	if err != nil {
		log.Printf("Error scraping %s : %v", testlink, err)
	}

	// After Scrape finishes, loop over the pageData slice
	for teamIdx, team := range pageData {
		fmt.Printf("\n========== TEAM #%d ==========\n", teamIdx+1)
		fmt.Println("Team Name:", team.Teamname)
		fmt.Println("Coach Names:", strings.Join(team.CoachNames, ", "))
		fmt.Println("Captain Names:", strings.Join(team.CaptainNames, ", "))
		fmt.Println("Formation:", team.Formation)

		// Loop over the slices of tables for this team
		for tableGroupIdx, tableGroup := range team.AllTables {
			fmt.Printf("\n--- Table Group #%d ---\n", tableGroupIdx+1)

			// Loop over the individual tables inside the group
			for tableIdx, table := range tableGroup {
				fmt.Printf("\n   --- Table #%d ---\n", tableIdx+1)
				fmt.Println("   Title:", table.Title)
				fmt.Println("   Tab Name:", table.TabName)
				fmt.Println("   Headers:", strings.Join(table.Headers, ", "))

				// Print each row inside the table
				fmt.Println("   Rows:")
				for _, row := range table.Rows {
					fmt.Println("    ", strings.Join(row, ", "))
				}
			}
		}
	}

}

func extractTeamName(title string) string {
	parts := strings.Fields(title)
	if len(parts) <= 2 {
		return title // Not enough words to safely trim
	}
	return strings.Join(parts[:len(parts)-2], " ")
}
